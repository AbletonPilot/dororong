name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: dororong-linux-x86_64
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: dororong-windows-x86_64.exe
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            name: dororong-macos-x86_64
            archive: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        shell: bash
        run: |
          # Get absolute paths
          WORKSPACE_DIR=$(pwd)
          TARGET_DIR="$WORKSPACE_DIR/target/${{ matrix.target }}/release"

          # Determine binary name based on OS
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            BINARY_NAME="dororong.exe"
          else
            BINARY_NAME="dororong"
          fi

          BINARY_PATH="$TARGET_DIR/$BINARY_NAME"

          # Verify binary exists
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Error: Binary not found: $BINARY_PATH"
            echo "Available files in $TARGET_DIR:"
            ls -la "$TARGET_DIR"
            exit 1
          fi

          echo "Found binary at: $BINARY_PATH"

          # Create archive directory
          mkdir -p "$TARGET_DIR/archive/dororong-${{ github.ref_name }}-${{ matrix.target }}/"

          # Copy binary to archive using absolute path
          cp "$BINARY_PATH" "$TARGET_DIR/archive/dororong-${{ github.ref_name }}-${{ matrix.target }}/"

          # Copy additional files
          cp "$WORKSPACE_DIR/README.md" "$TARGET_DIR/archive/dororong-${{ github.ref_name }}-${{ matrix.target }}/"

          # Create archive
          cd "$TARGET_DIR/archive"
          tar -czf "../dororong-${{ github.ref_name }}-${{ matrix.target }}.tar.gz" "dororong-${{ github.ref_name }}-${{ matrix.target }}/"
          echo "ASSET_NAME=dororong-${{ github.ref_name }}-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: archive-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.ASSET_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          # Move archives to root
          find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
            if [ -f "$file" ]; then
              cp "$file" .
            fi
          done

      - name: Calculate checksums
        run: |
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> SHA256SUMS
            fi
          done

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.zip
            SHA256SUMS
          generate_release_notes: true
          body: |
            Download the appropriate binary for your platform and add it to your PATH.

            **Supported Platforms**: Linux (x86_64), macOS (x86_64), Windows (x86_64)

            SHA256 checksums are in the SHA256SUMS file.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
