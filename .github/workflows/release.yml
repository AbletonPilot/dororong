name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: dororong-linux-x86_64
            archive: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: dororong-linux-aarch64
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: dororong-windows-x86_64.exe
            archive: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            name: dororong-macos-x86_64
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            name: dororong-macos-aarch64
            archive: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          # Determine binary name based on OS
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            BINARY_NAME="dororong.exe"
          else
            BINARY_NAME="dororong"
          fi

          # Verify binary exists and create a working copy
          if [ ! -f "$BINARY_NAME" ]; then
            echo "Error: Binary not found"
            exit 1
          fi

          # Create a working copy to avoid hardlink issues
          cp "$BINARY_NAME" "${BINARY_NAME}_working_copy"
          BINARY_NAME="${BINARY_NAME}_working_copy"

          # Create archive directory
          mkdir -p archive/dororong-${{ github.ref_name }}-${{ matrix.target }}/

          # Copy binary to archive
          cp "$BINARY_NAME" archive/dororong-${{ github.ref_name }}-${{ matrix.target }}/

          # Copy additional files
          cp ../../../README.md archive/dororong-${{ github.ref_name }}-${{ matrix.target }}/

          # Create archive
          cd archive
          if [ "${{ matrix.archive }}" == "zip" ]; then
            zip -r ../dororong-${{ github.ref_name }}-${{ matrix.target }}.zip dororong-${{ github.ref_name }}-${{ matrix.target }}/
            echo "ASSET_NAME=dororong-${{ github.ref_name }}-${{ matrix.target }}.zip" >> $GITHUB_ENV
          else
            tar -czf ../dororong-${{ github.ref_name }}-${{ matrix.target }}.tar.gz dororong-${{ github.ref_name }}-${{ matrix.target }}/
            echo "ASSET_NAME=dororong-${{ github.ref_name }}-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
          fi

          # Copy standalone binary for Homebrew (using correct filename)
          cd ../..
          cp "$BINARY_NAME" "${{ matrix.name }}"
          echo "STANDALONE_BINARY=${{ matrix.name }}" >> $GITHUB_ENV

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: archive-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.ASSET_NAME }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.STANDALONE_BINARY }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          # Move archives to root
          find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
            if [ -f "$file" ]; then
              cp "$file" .
            fi
          done

          # Move binaries to root for Homebrew
          find binary-* -type f | while read file; do
            basename_file=$(basename "$file")
            cp "$file" "$basename_file"
          done

      - name: List release assets
        run: |
          echo "Release assets prepared"
          ls -1 *.tar.gz *.zip dororong-* 2>/dev/null | wc -l | xargs echo "Total files:"

      - name: Calculate checksums
        run: |
          for file in *.tar.gz *.zip dororong-*; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> SHA256SUMS
            fi
          done

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.zip
            dororong-*
            SHA256SUMS
          generate_release_notes: true
          body: |
            Download the appropriate binary for your platform and add it to your PATH.
            
            **Supported Platforms**: Linux (x86_64, aarch64), macOS (x86_64, aarch64), Windows (x86_64)
            
            SHA256 checksums are in the SHA256SUMS file.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
